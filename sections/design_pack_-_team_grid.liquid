{%- comment -%}
{
  "pack_name": "Team - grid",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This section or template will not display properly without the <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a> app installed. Please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with any questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless -%}

{%- comment -%} Color: check if color is set to transparent {%- endcomment -%}
{%- assign button_alpha = section.settings.button_background_color | color_extract: 'alpha' -%}

{%- comment -%} Images: check image crop aspect ratio {%- endcomment -%}
{%- assign image_crop_width = section.settings.image_crop | split: ':' | first | times: 1000 -%}
{%- assign image_crop_height = section.settings.image_crop | split: ':' | last | times: 1000 -%}

{%- comment -%} Images: all placeholders {%- endcomment -%}
{%- assign placeholder_image_id_1 = 'sZ_eUuq0-W8' -%}
{%- assign placeholder_image_id_2 = 'b4GXxJEn1Hc' -%}
{%- assign placeholder_image_id_3 = 'zqhe4qjVTJI' -%}
{%- assign placeholder_image_id_default = 'a9mDt8wcOE0' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  {%- capture main_font -%}{{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }}{%- endcapture -%}
  {%- capture heading_font -%}{{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }}{%- endcapture -%}
{%- endif -%}

#DP--{{ section.id }} {
  background: {{ section.settings.background_color }};
}

#DP--{{ section.id }} .dsgn-pck__grid {
  gap: 20px;
}

#DP--{{ section.id }} .dsgn-pck__grid-item {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  padding: 1em;
  flex: 1 0 auto;
  display: flex;
  color: {{ section.settings.text_color }};
  background: {{ section.settings.text_background_color }};
  {%- if section.settings.override_theme_font != blank -%}
    font-family: {{ main_font }};
    font-weight: {{ section.settings.main_font.weight }};
    font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__icon {
  width: 20%;
  max-width: 100px;
  height: auto;
  align-self: flex-start;
  margin-right: 10px;
}

#DP--{{ section.id }} .dsgn-pck__heading {
  color: {{ section.settings.text_color }};
  margin-bottom: 0.3em;
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.008 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ heading_font }};
  font-weight: {{ section.settings.heading_font.weight }};
  font-style: {{ section.settings.heading_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__text-block__content {
  width: 100%
}

#DP--{{ section.id }} .dsgn-pck__text-block {
  padding: 30px;
  display: flex;
  align-items: center;
  background: {{ section.settings.text_background_color }};
}

#DP--{{ section.id }} .dsgn-pck__text-block__text {
  margin: 2em 0;
}

#DP--{{ section.id }} .dsgn-pck__text-block__text p {
  color: {{ section.settings.text_color }};
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
    font-family: {{ main_font }};
    font-weight: {{ section.settings.main_font.weight }};
    font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button {
  display: inline-block;
  text-decoration: none;
  padding: 0.5em 1.2em;
  border: thin solid;
  transition: all 0.3s;
  border-radius: {{ section.settings.button_radius }}px;
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  color: {{ section.settings.button_label_color }};
  border-color: {%- if button_alpha != 0 -%}{{ section.settings.button_background_color }}{%- else -%}{{ section.settings.button_label_color }}{%- endif -%};
  background-color: {{ section.settings.button_background_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button:hover {
  {%- if button_alpha != 0 -%}
  background-color: {{ section.settings.button_background_color | color_modify: 'alpha', 0.8 }};
  border-color: transparent;
  {%- else -%}
  background-color: {{ section.settings.button_label_color | color_modify: 'alpha', 0.1 }}
  {%- endif -%};
}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }}.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

/* Layout */
#DP--{{ section.id }} {
  margin-top: {{ section.settings.outer_margin }}px;
  margin-bottom: {{ section.settings.outer_margin }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phone to portrait tablet */
@media (max-width: 767px) {
  #DP--{{ section.id }} .dsgn-pck__grid {
    grid-template-columns: 1fr 1fr;
  }
  #DP--{{ section.id }} .dsgn-pck__page-description {
    width: 100%;
  }
  #DP--{{ section.id }} .dsgn-pck__text-block__text {
    margin: 1em 0;
  }
}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} .dsgn-pck__grid {
    grid-template-columns: 1fr;
    gap: 40px;
  }

  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__sizer {
    min-width: 70%;
    padding-top: {{ section.settings.inner_padding | divided_by: 2 }}px;
    padding-bottom: {{ section.settings.inner_padding | divided_by: 2 }}px;
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__team-grid dsgn-pck__section">
  <div class="dsgn-pck__sizer
              dsgn-pck__sizer--team-grid">
    <div class="dsgn-pck__grid dsgn-pck__grid--{{ section.settings.per_row }}-per-row">
      {%- for block in section.blocks -%}
        {%- if block.type == 'team_member' -%}
          {%- comment -%} CSS {%- endcomment -%}
          <style>
            .dsgn-pck__block-{{ block.id }} img {
              object-position: {{ block.settings.focal_point }};
            }
          </style>
          {%- comment -%} Crop based on initial image width and height{%- endcomment -%}
          {%- if section.settings.image_crop == 'none' -%}
            {%- assign image_crop_width = block.settings.image.width | default: '1000' -%}
            {%- assign image_crop_height = block.settings.image.height | default: '1200' -%}
          {%- endif -%}
          {%- capture placeholder_image_id -%}
            {%- case forloop.index -%}
              {%- when 1 -%}
                {{ placeholder_image_id_1 }}
              {%- when 2 -%}
                {{ placeholder_image_id_2 }}
              {%- when 3 -%}
                {{ placeholder_image_id_3 }}
              {%- else -%}
                {{ placeholder_image_id_default }}
            {%- endcase -%}
          {%- endcapture -%}
          <div class="dsgn-pck__grid-item dsgn-pck__block-{{ block.id }}" {{ block.shopify_attributes }} style="--dsgn-pck-animate: {{ forloop.index }}">
            <div class="dsgn-pck__item">
              {%- if block.settings.link != blank -%}
                <a href="{{ block.settings.link }}">
              {%- endif -%}
              <div class="dsgn-pck__image__wrapper">
                <svg viewBox="0 0 {{ image_crop_width }} {{ image_crop_height }}"></svg>
                {%- if block.settings.image != blank -%}
                  {{ block.settings.image | image_url: width: 2800 | image_tag: loading: 'lazy' }}
                {%- else -%}
                  <img src="https://source.unsplash.com/{{ placeholder_image_id }}/1000x1000"
                      alt=""
                      loading="lazy"
                      height="1000"
                      width="1200">
                {%- endif -%}
              </div>
              {%- if block.settings.link != blank -%}
                </a>
              {%- endif -%}
            </div>
            <div class="dsgn-pck__inner-content">
              {%- if block.settings.icon != blank -%}
                <img class="dsgn-pck__icon"
                  src="{{ block.settings.icon | image_url: width: 100 }}"
                  alt="{{ block.settings.icon.alt }}"
                  loading="lazy"
                  height="{{ block.settings.icon.height }}"
                  width="{{ block.settings.icon.width }}">
              {%- endif -%}
              <div class="dsgn-pck__heading-text-wrap">
                {%- if block.settings.title != blank -%}
                  <h3 class="dsgn-pck__heading">{{ block.settings.title }}</h3>
                {%- endif -%}
                {%- if block.settings.text != blank -%}
                  <div class="dsgn-pck__text dsgn-pck__rte">{{ block.settings.text }}</div>
                {%- endif -%}
              </div>
            </div>
          </div>
        {%- elsif block.type == 'text_block' -%}
          <div class="dsgn-pck__grid-item dsgn-pck__text-block dsgn-pck__block-{{ block.id }}" {{ block.shopify_attributes }} style="--dsgn-pck-animate: {{ forloop.index }}">
            <div class="dsgn-pck__text-block__content">
              {%- if block.settings.title != blank -%}
                <h3 class="dsgn-pck__text-block__heading dsgn-pck__heading">{{ block.settings.title }}</h3>
              {%- endif -%}
              {%- if block.settings.text_block_text != blank -%}
                <div class="dsgn-pck__text-block__text dsgn-pck__text dsgn-pck__rte">{{ block.settings.text_block_text }}</div>
              {%- endif -%}
              {%- if block.settings.text_block_button_label != blank -%}
                <a class="dsgn-pck__text-block__button dsgn-pck__button" href="{{ block.settings.text_block_button_link }}">{{ block.settings.text_block_button_label }}</a>
              {%- endif -%}
            </div>
          </div>
        {%- endif -%}
      {%- endfor -%}
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Team - grid",
  "class": "DP__team-grid",
  "settings": [
    {
      "type": "range",
      "id": "per_row",
      "label": "Blocks per row",
      "default": 4,
      "min": 1,
      "max": 5
    },
    {
      "type": "select",
      "id": "image_crop",
      "label": "Image aspect ratio",
      "default": "1:1",
      "options": [
        {
          "value": "4:3",
          "label": "Landscape (4:3)"
        },
        {
          "value": "2:3",
          "label": "Portrait (2:3)"
        },
        {
          "value": "1:1",
          "label": "Square (1:1)"
        },
        {
          "value": "none",
          "label": "Original"
        }
      ]
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 100,
      "unit": "%"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "button_label_color",
      "label": "Button label",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "range",
      "id": "button_radius",
      "label": "Button border radius",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "color_background",
      "id": "text_background_color",
      "label": "Text background",
      "default": "linear-gradient(46deg, rgba(11, 11, 11, 1) 13%, rgba(209, 209, 209, 1) 86%)"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background"
    },
    {
      "type": "select",
      "id": "animation",
      "label": "Animation",
      "default": "fade-in",
      "options": [
        {
          "value": "fade-in",
          "label": "Fade-in"
        },
        {
          "value": "fade-in-left",
          "label": "Fade-in left"
        },
        {
          "value": "fade-in-right",
          "label": "Fade-in right"
        },
        {
          "value": "fade-in-up",
          "label": "Fade-in up"
        },
        {
          "value": "fade-in-down",
          "label": "Fade-in down"
        },
        {
          "value": "none",
          "label": "None"
        }
      ]
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "range",
      "id": "base_width",
      "label": "Size",
      "min": 60,
      "max": 100,
      "step": 5,
      "default": 85,
      "unit": "%"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint for content.",
      "default": "1000"
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "textarea",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "textarea",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "blocks": [
    {
      "type": "team_member",
      "name": "Team member",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "select",
          "id": "focal_point",
          "label": "Image focal point",
          "info": "Used to keep the subject of your photo in view.",
          "default": "center center",
          "options": [
            {
              "value": "20% 0",
              "label": "Top left"
            },
            {
              "value": "top center",
              "label": "Top center"
            },
            {
              "value": "80% 0",
              "label": "Top right"
            },
            {
              "value": "20% 50%",
              "label": "Left"
            },
            {
              "value": "center center",
              "label": "Center"
            },
            {
              "value": "80% 50%",
              "label": "Right"
            },
            {
              "value": "20% 100%",
              "label": "Bottom left"
            },
            {
              "value": "bottom center",
              "label": "Bottom center"
            },
            {
              "value": "80% 100%",
              "label": "Bottom right"
            }
          ]
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Name",
          "default": "Ruby Perkins"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Title",
          "default": "<p>Head of Technology</p>"
        },
        {
          "type": "image_picker",
          "id": "icon",
          "label": "Icon"
        }
      ]
    },
    {
      "type": "text_block",
      "name": "Text block",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Join the team!"
        },
        {
          "type": "richtext",
          "id": "text_block_text",
          "label": "Text",
          "default": "<p>We've got great people working with us and you could one of them.</p>"
        },
        {
          "type": "text",
          "id": "text_block_button_label",
          "label": "Button label",
          "default": "Apply Now"
        },
        {
          "type": "url",
          "id": "text_block_button_link",
          "label": "Button link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Team - grid 🎒",
      "blocks": [
        {
          "type": "team_member",
          "settings": {
            "title": "Paisley Dyer",
            "text": "<p>Chief Executive Officer</p>",
            "focal_point": "20% 100%"
          }
        },
        {
          "type": "team_member",
          "settings": {
            "title": "Marcelina Little",
            "text": "<p>Chief Technology Officer</p>",
            "focal_point": "20% 100%"
          }
        },
        {
          "type": "team_member",
          "settings": {
            "title": "Ezmae",
            "text": "<p>Chief Snack Officer</p>",
            "focal_point": "top center"
          }
        },
        {
          "type": "text_block",
          "settings": {
            "title": "Join the team!",
            "text_block_text": "<p>We've got great people working with us and you could one of them.</p>",
            "text_block_button_label": "Apply now"
          }
        }
      ]
    }
  ]
}
{% endschema %}
{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}">
(function(){

  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    load: function(section){
      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: 0
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>

{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>

{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}">
(function(){

  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    load: function(section){

      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: [0, 0.25, 0.5, 0.75, 1]
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
